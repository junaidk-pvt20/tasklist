{"version":3,"file":"static/js/186.18751d9d.chunk.js","mappings":"8KACA,EAA4B,6BAA5B,EAAiE,yBAAjE,EAAiG,wBAAjG,EAA+H,uB,SCgD/H,EA/CkB,WAChB,IAAAA,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAwBL,EAAAA,EAAAA,UAAS,GAAEM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA5BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,IAEpBG,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAMJ,OALIP,IACFO,EAAaC,aAAY,WACvBH,GAAQ,SAACI,GAAQ,OAAKA,EAAW,CAAC,GACpC,GAAG,MAEE,kBAAMC,cAAcH,EAAY,CACzC,GAAG,CAACP,IAmBJ,OACEW,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAiBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,eACJC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAaC,SAXd,WACjB,IAAME,EAAUC,KAAKC,MAAMd,EAAO,IAC5Be,EAAUf,EAAO,GACvB,MAAM,GAANgB,OAAUJ,EAAQK,WAAWC,SAAS,EAAG,KAAI,KAAAF,OAAID,EAC9CE,WACAC,SAAS,EAAG,KACjB,CAKmCC,MAC/BZ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAYC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,UAAQH,UAAWC,EAAYW,QAtBb,WACtBvB,GAAcD,EAChB,EAoB8Dc,SACrDd,EAAY,OAAS,WAExBe,EAAAA,EAAAA,KAAA,UAAQH,UAAWC,EAAYW,QArBjB,WAClBnB,EAAQ,GACRJ,GAAa,EACf,EAkB0Da,SAAC,eAM7D,C","sources":["webpack://tasklist/./src/pages/stopwatch/Stopwatch.module.scss?2d46","pages/stopwatch/Stopwatch.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"stopwatch\":\"Stopwatch_stopwatch__mXBfZ\",\"timer\":\"Stopwatch_timer__Z0yTk\",\"btns\":\"Stopwatch_btns__mXWnl\",\"btn\":\"Stopwatch_btn__1PIhI\"};","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./Stopwatch.module.scss\";\r\nconst Stopwatch = () => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [time, setTime] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let intervalId;\r\n    if (isRunning) {\r\n      intervalId = setInterval(() => {\r\n        setTime((prevTime) => prevTime + 1);\r\n      }, 1000);\r\n    }\r\n    return () => clearInterval(intervalId);\r\n  }, [isRunning]);\r\n\r\n  const handleStartStop = () => {\r\n    setIsRunning(!isRunning);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setTime(0);\r\n    setIsRunning(false);\r\n  };\r\n\r\n  const formatTime = () => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = time % 60;\r\n    return `${minutes.toString().padStart(2, \"0\")}:${seconds\r\n      .toString()\r\n      .padStart(2, \"0\")}`;\r\n  };\r\n\r\n  return (\r\n    <div className={styles.stopwatch}>\r\n      <h1>Stopwatch</h1>\r\n      <div className={styles.timer}>{formatTime()}</div>\r\n      <div className={styles.btns}>\r\n        <button className={styles.btn} onClick={handleStartStop}>\r\n          {isRunning ? \"Stop\" : \"Start\"}\r\n        </button>\r\n        <button className={styles.btn} onClick={handleReset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stopwatch;\r\n"],"names":["_useState","useState","_useState2","_slicedToArray","isRunning","setIsRunning","_useState3","_useState4","time","setTime","useEffect","intervalId","setInterval","prevTime","clearInterval","_jsxs","className","styles","children","_jsx","minutes","Math","floor","seconds","concat","toString","padStart","formatTime","onClick"],"sourceRoot":""}