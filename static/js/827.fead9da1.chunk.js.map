{"version":3,"file":"static/js/827.fead9da1.chunk.js","mappings":"iJA4CA,UA1Cc,WACZ,IAAAA,GAAkCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAsCL,EAAAA,EAAAA,UAAS,GAAEM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,IAGlCG,EAAAA,EAAAA,YAAU,WACR,GAAIN,EAAY,EAAG,CACjB,IAAMO,EAAYC,YAAW,WAC3BP,GAAa,SAACQ,GAAa,OAAKA,EAAgB,CAAC,GACnD,GAAG,KACH,OAAO,kBAAMC,aAAaH,EAAW,CACvC,CACF,GAAG,CAACP,KAGJM,EAAAA,EAAAA,YAAU,WACR,IAAMK,EAAaC,aAAY,WAC7BP,EAAeQ,KAAKC,MACtB,GAAG,KACH,OAAO,kBAAMC,cAAcJ,EAAY,CACzC,GAAG,IAWH,OACEK,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uCACJD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,mBAZY,SAACE,GAClB,IAAMC,EAAeC,KAAKC,MAAMH,EAAe,KACzCI,EAAUF,KAAKC,MAAMF,EAAe,IACpCI,EAAUJ,EAAe,GAC/B,MAAM,GAANK,OAAUF,EAAQG,WAAWC,SAAS,EAAG,KAAI,KAAAF,OAAID,EAC9CE,WACAC,SAAS,EAAG,KACjB,CAKwBC,CAAuB,IAAZ5B,OAE/BkB,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qCACJD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,iBAAe,IAAIJ,KAAKT,GAAayB,0BAG9C,C","sources":["pages/stopwatch/Diffrence.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst Timer = () => {\r\n  const [countdown, setCountdown] = useState(10);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n\r\n  // Countdown using setTimeout\r\n  useEffect(() => {\r\n    if (countdown > 0) {\r\n      const timeoutId = setTimeout(() => {\r\n        setCountdown((prevCountdown) => prevCountdown - 1);\r\n      }, 1000); // 1 second\r\n      return () => clearTimeout(timeoutId);\r\n    }\r\n  }, [countdown]);\r\n\r\n  // Current time using setInterval\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setCurrentTime(Date.now());\r\n    }, 1000); // 1 second\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  const formatTime = (milliseconds) => {\r\n    const totalSeconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(totalSeconds / 60);\r\n    const seconds = totalSeconds % 60;\r\n    return `${minutes.toString().padStart(2, \"0\")}:${seconds\r\n      .toString()\r\n      .padStart(2, \"0\")}`;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Countdown Timer using setTimeout:</h2>\r\n      <p>Time remaining: {formatTime(countdown * 1000)}</p>\r\n\r\n      <h2>Current Time using setInterval:</h2>\r\n      <p>Current Time: {new Date(currentTime).toLocaleTimeString()}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n"],"names":["_useState","useState","_useState2","_slicedToArray","countdown","setCountdown","_useState3","_useState4","currentTime","setCurrentTime","useEffect","timeoutId","setTimeout","prevCountdown","clearTimeout","intervalId","setInterval","Date","now","clearInterval","_jsxs","children","_jsx","milliseconds","totalSeconds","Math","floor","minutes","seconds","concat","toString","padStart","formatTime","toLocaleTimeString"],"sourceRoot":""}